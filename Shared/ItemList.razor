@page "/items"

@using Zip2Clear.Data
@using Microsoft.EntityFrameworkCore
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Popups

@inject MyDbContext context
@inject SfDialogService DialogService

<SfGrid DataSource="@itemList" AllowFiltering="true" @ref="itemGrid" AllowPaging="true" AllowSorting="true" Toolbar="@toolbar">
    <GridEvents OnActionBegin="ActionBeginHandler" CellSaved="CellSaveHandler" TValue="Item"></GridEvents>
    <GridEditSettings AllowAdding="@editable" AllowDeleting="@editable" AllowEditOnDblClick="@editable" AllowEditing="@editable" ShowConfirmDialog="false"></GridEditSettings>
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
    <GridColumns>
        @if (invoice == null)
        {
            <GridForeignColumn Field="@nameof(Item.InvoiceId)" HeaderText="Invoice Number" ForeignDataSource="@invoiceList" ForeignKeyValue="Number"></GridForeignColumn>
            <GridColumn Field="Invoice.Vendor.Name" HeaderText="Vendor"></GridColumn>
        }
        <GridColumn Field="@nameof(Item.Quantity)" HeaderText="Quantity"></GridColumn>
        <GridForeignColumn Field="@nameof(Item.TariffId)" HeaderText="Description" ForeignDataSource="@tariffList" ForeignKeyValue="Name"></GridForeignColumn>
        <GridColumn Field="@nameof(Item.Value)" HeaderText="Value"></GridColumn>
        <GridColumn Field="@nameof(Item.Weight)" HeaderText="Weight"></GridColumn>
        <GridColumn Field="Tariff.Uom.Code" HeaderText="Uom" AllowEditing="false" AllowAdding="false"></GridColumn>
        <GridForeignColumn Field="@nameof(Item.TariffId)" HeaderText="General Rate" ForeignDataSource="@tariffList" ForeignKeyValue="GeneralRate" AllowEditing="false" AllowAdding="false"></GridForeignColumn>
        <GridForeignColumn Field="@nameof(Item.TariffId)" HeaderText="Excise Rate" ForeignDataSource="@tariffList" ForeignKeyValue="ExciseRate" AllowEditing="false" AllowAdding="false"></GridForeignColumn>
        <GridColumn AllowEditing="false" AllowAdding="false">
            <GridCommandColumns>
                <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-delete", CssClass="e-flat" })"></GridCommandColumn>
            </GridCommandColumns>
        </GridColumn>
    </GridColumns>
</SfGrid>

@code {
    [CascadingParameter]
    protected Declaration declaration { get; set; }

    [CascadingParameter]
    protected Invoice invoice { get; set; }

    SfGrid<Item> itemGrid;
    public List<Item> itemList { get; set; }
    private IEnumerable<Uom> uomList;
    private IEnumerable<Tariff> tariffList;
    private IEnumerable<Invoice> invoiceList;
    private IEnumerable<Vendor> vendorList;
    private IEnumerable<Department> departments;
    private List<string> toolbar;
    private bool editable;

    protected override async Task OnInitializedAsync()
    {
        await RefreshItemList();
        await base.OnInitializedAsync();
    }

    private async Task RefreshItemList()
    {
        if ( declaration != null)
        {
            itemList = await context.Item
                                .Include(i => i.Invoice)
                                .Include(i => i.Invoice.Vendor)
                                .Where(i => i.Invoice.Declaration == declaration)
                                .ToListAsync();
            editable = false;
        }
        else if (invoice != null)
        {
            itemList = await context.Item
                                .Where(i => i.Invoice == invoice)
                                .ToListAsync();
            editable = true;
            toolbar = new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel", "Search" };
        }
        else
        {
            itemList = await context.Item
                                .Include(i => i.Tariff)
                                .Include(i => i.Invoice)
                                .ToListAsync();
            editable = false;
        }

        uomList = await context.Uom.ToListAsync();
        tariffList = await context.Tariff.ToListAsync();
        invoiceList = await context.Invoice.Include(i => i.Vendor).ToListAsync();
        vendorList = await context.Vendor.ToListAsync();
        departments = await context.Department.ToListAsync();
        await base.OnInitializedAsync();
    }

    private void ActionBeginHandler(ActionEventArgs<Item> Args)
    {
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (Args.Action == "Add")
            {
                Args.Data.ItemId = Guid.NewGuid();
                context.Item.Add(Args.Data);
                context.SaveChanges();
                RefreshItemList();
            }
            else if (Args.Action == "Edit")
            {
                try
                {
                    var itemExists = context.Item.Find(Args.Data.ItemId);
                    if (itemExists != null)
                    {
                        context.Entry(itemExists).State = EntityState.Detached;
                        context.Item.Update(Args.Data);
                        context.SaveChanges();
                        RefreshItemList();
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
                
            }
        }
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            context.Item.Remove(Args.Data);
            context.SaveChanges();
            RefreshItemList();
        }
    }

    private void CellSaveHandler(CellSaveArgs<Item> args)
    {
        itemGrid.EndEditAsync();
    }
}
