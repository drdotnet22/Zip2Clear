@page "/items"

@using Zip2Clear.Data
@using Microsoft.EntityFrameworkCore
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Popups

@inject MyDbContext context
@inject SfDialogService DialogService

<SfGrid DataSource="@itemList" AllowFiltering="true">
    <GridEvents CommandClicked="ActionBeginHandler" TValue="Item"></GridEvents>
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
    <GridColumns>
        @if (invoice == null)
        {
            <GridForeignColumn Field="@nameof(Item.InvoiceId)" HeaderText="Invoice Number" ForeignDataSource="@invoiceList" ForeignKeyValue="Number"></GridForeignColumn>
            <GridColumn Field="Invoice.Vendor.Name" HeaderText="Vendor"></GridColumn>
        }
        <GridForeignColumn Field="@nameof(Item.DepartmentId)" HeaderText="Department" ForeignDataSource="@departments" ForeignKeyValue="Code"></GridForeignColumn>
        <GridColumn Field="@nameof(Item.Quantity)" HeaderText="Quantity"></GridColumn>
        <GridForeignColumn Field="@nameof(Item.TariffId)" HeaderText="Description" ForeignDataSource="@tariffList" ForeignKeyValue="Name"></GridForeignColumn>
        <GridColumn Field="@nameof(Item.Value)" HeaderText="Value"></GridColumn>
        <GridColumn Field="@nameof(Item.Weight)" HeaderText="Weight"></GridColumn>
        <GridColumn Field="Tariff.Uom.Code" HeaderText="Uom"></GridColumn>
        <GridColumn Field="@nameof(Item.UomValue)" HeaderText="Uom Value"></GridColumn>
        <GridForeignColumn Field="@nameof(Item.TariffId)" HeaderText="General Rate" ForeignDataSource="@tariffList" ForeignKeyValue="GeneralRate"></GridForeignColumn>
        <GridForeignColumn Field="@nameof(Item.TariffId)" HeaderText="Excise Rate" ForeignDataSource="@tariffList" ForeignKeyValue="ExciseRate"></GridForeignColumn>
        <GridColumn>
            <GridCommandColumns>
                <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-delete", CssClass="e-flat" })"></GridCommandColumn>
            </GridCommandColumns>
        </GridColumn>
    </GridColumns>
</SfGrid>

@code {
    [CascadingParameter]
    protected Declaration declaration { get; set; }

    [CascadingParameter]
    protected Invoice invoice { get; set; }

    private IEnumerable<Item> itemList;
    private IEnumerable<Uom> uomList;
    private IEnumerable<Tariff> tariffList;
    private IEnumerable<Invoice> invoiceList;
    private IEnumerable<Vendor> vendorList;
    private IEnumerable<Department> departments;

    protected override async Task OnInitializedAsync()
    {
        await RefreshItemList();
        await base.OnInitializedAsync();
    }

    private async Task RefreshItemList()
    {
        if ( declaration != null)
        {
            itemList = await context.Item
                                .Include(i => i.Invoice)
                                .Include(i => i.Invoice.Vendor)
                                .Where(i => i.Invoice.Declaration == declaration)
                                .ToListAsync();
        }
        else if (invoice != null)
        {
            itemList = await context.Item
                                .Where(i => i.Invoice == invoice)
                                .ToListAsync();
        }
        else
        {
            itemList = await context.Item
                                .Include(i => i.Tariff)
                                .Include(i => i.Invoice)
                                .ToListAsync();
        }

        uomList = await context.Uom.ToListAsync();
        tariffList = await context.Tariff.ToListAsync();
        invoiceList = await context.Invoice.Include(i => i.Vendor).ToListAsync();
        vendorList = await context.Vendor.ToListAsync();
        departments = await context.Department.ToListAsync();
        await base.OnInitializedAsync();
    }

    public async void ActionBeginHandler(CommandClickEventArgs<Item> args)
    {
        if (args.CommandColumn.Type == CommandButtonType.Delete)
        {
            bool isConfirm = await DialogService.ConfirmAsync($"Are you sure you want to permanently delete the item named {args.RowData.Tariff.Name}?", "Delete Item?");
            if (isConfirm == true)
            {
                context.Remove(args.RowData);
                context.SaveChanges();
                RefreshItemList();
            }
        }
    }
}
