@using Microsoft.EntityFrameworkCore
@using Zip2Clear.Data

@inject Radzen.DialogService DialogService
@inject Zip2Clear.Data.MyDbContext dbContext

<h3>New Item</h3>
<Div Flex="Flex.JustifyContent.Start" Margin="Margin.Is3.FromBottom">
    <Fields>
        <Field>
            <FieldLabel>Quantity</FieldLabel>
            <NumericEdit TValue="double" @ref="qntyEle" @bind-Value="item.Quantity"/>
        </Field>
        <Field>
            <FieldLabel>Description</FieldLabel>
            <Autocomplete TItem="Tariff" TValue="Tariff" Data="@tariffs" ValueField="@(( tariffs ) => tariffs)" 
                TextField="@(( tariffs ) => tariffs.Name)" @bind-SelectedValue="@item.Tariff" />
        </Field>
        <Field>
            <FieldLabel>Value</FieldLabel>
            <NumericEdit TValue="decimal" @bind-Value="item.Value" />
        </Field>
    </Fields>
</Div>
<Div Flex="Flex.JustifyContent.Start" Margin="Margin.Is3.FromBottom" >
    <Fields>
        <Field>
            <FieldLabel>Weight</FieldLabel>
            <NumericEdit TValue="double?" @bind-Value="item.Weight" @onblur="OnTariffSet" />
        </Field>
        <Field>
            <FieldLabel>UOM: Code is @item.Tariff?.UomId</FieldLabel>
            <NumericEdit TValue="double?" @bind-Value="item.UomValue" />
        </Field>
        <Field>
            <FieldLabel>Department</FieldLabel>
            <TextEdit />
        </Field>
    </Fields>
</Div>

<Button Class="btn btn-primary" Clicked="SaveAndNew" >Save and New</Button>
<Button Class="btn btn-secondary" Clicked="SaveAndClose" >Save and close</Button>
<Button Class="btn btn-danger" Clicked="CancelAndClose" >Cancel and Close</Button>


@code {
    [Parameter] public string InvoiceId { get; set; }


    public Invoice invoice;
    public Item item { get; set; } 
    public IEnumerable<Tariff> tariffs;
    private List<Invoice> invoiceList;

    protected override async Task OnInitializedAsync()
    {
        invoiceList = await dbContext.Invoice.ToListAsync();
        invoice = invoiceList.FirstOrDefault(i => i.InvoiceId.ToString() == InvoiceId);
        tariffs = await dbContext.Tariff.ToListAsync();
        AddItem();
    }

    private async Task AddItem()
    {
        item = new Item();
        item.ItemId = Guid.NewGuid();
        item.Invoice = invoice;
    }

    private Blazorise.NumericEdit<double> qntyEle;
    private async Task SaveAndNew()
    {
        dbContext.Item.Add(item);
        await dbContext.SaveChangesAsync();
        AddItem();
        qntyEle.Focus();
    }

    private async Task SaveAndClose()
    {
        dbContext.Item.Add(item);
        await dbContext.SaveChangesAsync();
        DialogService.Close(true);
    }

    private async Task CancelAndClose()
    {
        DialogService.Close(true);
    }

    private async Task OnTariffSet()
    {
        if (item.Tariff.Uom.Code == "EA")
        {
            item.UomValue = item.Quantity;
        }
        else if (item.Tariff.Uom.Code == "LB")
        {
            item.UomValue = item.Weight;
        }
    }
}
