@page "/unassignedinvoices/"

@using Microsoft.EntityFrameworkCore
@using Zip2Clear.Data
@using Syncfusion.Blazor.Grids

@inject Zip2Clear.Data.MyDbContext context
@inject DeclarationServices declarationService


<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid DataSource="@unassignedInvoices" AllowSelection="true" @ref="sfGrid" >
                <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple" Mode="Syncfusion.Blazor.Grids.SelectionMode.Row" EnableToggle="true"
                                       EnableSimpleMultiRowSelection="true" ></GridSelectionSettings>
                <GridColumns>
                    <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
                    <GridColumn Field="@nameof(Invoice.Number)" HeaderText="Invoice Number"></GridColumn>
                    <GridForeignColumn Field="@nameof(Invoice.VendorId)" HeaderText="Vendor" ForeignDataSource="@vendorList" ForeignKeyValue="Name"></GridForeignColumn>
                    <GridColumn Field="@nameof(Invoice.Date)" HeaderText="Date"></GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>

<button class="btn btn-primary" onclick="@UpdateInvoices" >Add Invoices</button>


@code {
    [CascadingParameter]
    protected Declaration declaration { get; set; }

    [Parameter] 
    public EventCallback<string> OnClick { get; set; }

    SfGrid<Invoice> sfGrid;
    IEnumerable<Invoice> unassignedInvoices;
    IEnumerable<Vendor> vendorList;

    protected override async Task OnInitializedAsync()
    {
        vendorList = context.Vendor.ToList();
        unassignedInvoices = context.Invoice
                                .Where(i => i.Declaration == null)
                                .ToList();
        await base.OnInitializedAsync();
    }

    public async Task UpdateInvoices()
    {
        foreach (var invoice in sfGrid.SelectedRecords)
        {
            invoice.Declaration = declaration;
            context.Update(invoice);
        }
        context.SaveChangesAsync();
        await OnClick.InvokeAsync("CloseDialog");
    }
}
