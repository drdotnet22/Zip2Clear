@page "/tarifflist"

@using Zip2Clear.Data
@using Microsoft.EntityFrameworkCore
@using Syncfusion.Blazor.Grids

@inject MyDbContext dbContext

<h3>Tariff List</h3>

<SfGrid DataSource="@tariffs" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })" AllowPaging="true" @ref="Grid">
    <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true"></GridEditSettings>
    <GridEvents OnActionBegin="ActionBeginHandler" TValue="Tariff"></GridEvents>
    <GridColumns>
        <GridColumn Field="@nameof(Tariff.Name)" HeaderText="Name" ValidationRules="@(new ValidationRules{ Required=true })"></GridColumn>
        <GridColumn Field="@nameof(Tariff.UomId)" HeaderText="UOM" ValidationRules="@(new ValidationRules{ Required=true })"></GridColumn>
        <GridColumn Field="@nameof(Tariff.GeneralRate)" HeaderText="General Rate" ValidationRules="@(new ValidationRules{ Required=true })"></GridColumn>
        <GridColumn Field="@nameof(Tariff.ExciseRate)" HeaderText="Excise Rate" ValidationRules="@(new ValidationRules{ Required=true })"></GridColumn>
    </GridColumns>
</SfGrid>

@code {
    public IEnumerable<Tariff> tariffs { get; set; }
    SfGrid<Tariff> Grid;

    protected override void OnInitialized()
    {
        RefreshTariffList();
    }

    private async Task RefreshTariffList()
    {
        tariffs = dbContext.Tariff.ToList();
    }

    private void ActionBeginHandler(ActionEventArgs<Tariff> Args)
    {
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (Args.Action == "Add")
            {
                Args.Data.Id = Guid.NewGuid();
                dbContext.Tariff.Add(Args.Data);
                dbContext.SaveChanges();
                RefreshTariffList();
            }
            else if (Args.Action == "Edit")
            {
                try
                {
                    var tariffExists = dbContext.Tariff.Find(Args.Data.Id);
                    if (tariffExists != null)
                    {
                        dbContext.Entry(tariffExists).State = EntityState.Detached; //detach before update
                        dbContext.Tariff.Update(Args.Data);
                        dbContext.SaveChanges();
                        RefreshTariffList();
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
            }
        }
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            dbContext.Tariff.Remove(Args.Data);
            dbContext.SaveChanges();
            RefreshTariffList();
        }
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BatchSave))
        {

        }
    }
}
