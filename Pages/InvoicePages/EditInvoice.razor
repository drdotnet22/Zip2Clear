@page "/invoices/edit/{InvoiceId}"

@using Zip2Clear.Data
@using Microsoft.EntityFrameworkCore

@inject NavigationManager NavigationManager
@inject InvoiceServices invoiceService
@inject MyDbContext context

<h3>@invoice.Vendor.Name #@invoice.InvoiceNumber</h3>

<RadzenTabs>
    <Tabs>
        <RadzenTabsItem Text="Invoice Info">
            <br />
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">Invoice Number:</span>
                </div>
                <input class="form-control" @bind="invoice.InvoiceNumber" />
            </div>
            <br />
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">Vendor:</span>
                </div>
                <input class="form-control" @bind="invoice.Vendor.Name"/>
            </div>
            <br />
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">Invoice Date:</span>
                </div>
                <DatePicker TValue="DateTime" Date="@invoice.Date" DateChanged="@(args => OnDateChange(args))" />
            </div>
            <br />
        </RadzenTabsItem>
        <RadzenTabsItem Text="Items">
            This is where items are entered.
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>
<button class="btn btn-primary" @onclick="(() => UpdateInvoice())">Save</button>
<button class="btn btn-secondary" @onclick="(() => Cancel())">Cancel</button>
<button class="btn btn-danger" @onclick="(() => DeleteInvoice())">Delete</button>

@code {
    [Parameter]
    public string? InvoiceId { get; set; }

    DateTime invDate = DateTime.Now;
    private List<Invoice> Invoices;
    public Invoice? invoice { get; set; } = new Invoice();

    protected override async Task OnInitializedAsync()
    {
        await LoadInvoiceAsync();
        await base.OnInitializedAsync();
    }

    private async Task LoadInvoiceAsync()
    {
        Invoices = await context.Invoice.Include(i => i.Vendor).ToListAsync();
        invoice = Invoices.FirstOrDefault(i => i.Id.ToString() == InvoiceId);
    }

    private async Task UpdateInvoice()
    {
        invoice.Date = invDate;
        await invoiceService.UpdateInvoiceAsync(invoice);
        NavigationManager.NavigateTo("/invoices");
    }

    private async Task DeleteInvoice()
    {
        await invoiceService.DeleteInvoiceAsync(invoice);
        NavigationManager.NavigateTo("/invoices");
    } 

    private async Task Cancel()
    {
        NavigationManager.NavigateTo("/invoices");
    }

    void OnDateChange(DateTime date)
    {
        invoice.Date = date;
    }
}
