@page "/invoices/{InvoiceId}/edit"

@using Zip2Clear.Data
@using Microsoft.EntityFrameworkCore

@inject NavigationManager NavigationManager
@inject InvoiceServices invoiceService
@inject MyDbContext dbContext

<RadzenTabs>
    <Tabs>
        <RadzenTabsItem Text="Invoice Info">
            <Div Flex="Flex.JustifyContent.Start" Margin="Margin.Is3.FromBottom" >
                <Fields>
                    <Field>
                        <FieldLabel>Invoice Number</FieldLabel>
                        <TextEdit @ref="@firstEle" @bind-Text="invoice.InvoiceNumber" />
                    </Field>
                    <Field>
                        <FieldLabel>Vendor</FieldLabel>
                        <Autocomplete TItem="Vendor" TValue="string" Data="@vendors" ValueField="@(( vendor ) => vendor.Name)" TextField="@(( vendor ) => vendor.Name)"
                                      @bind-SelectedValue=@selectedVendor>
                            <NotFoundContent>Sorry... @context was not found! :( </NotFoundContent>
                        </Autocomplete>
                    </Field>
                    <Field>
                        <FieldLabel>Date</FieldLabel>
                        <DatePicker TValue="DateTime" Date="invDate" DateChanged="@(args => OnDateChange(args))" />
                    </Field>
                </Fields>
            </Div>
            <Div Flex="Flex.JustifyContent.Start" Margin="Margin.Is3.FromBottom" >
                <Fields>
                    <Field>
                        <FieldLabel>Shipping</FieldLabel>
                        <NumericEdit TValue="decimal" @bind-Value="invoice.Shipping" />
                    </Field>
                    <Field>
                        <FieldLabel>Insurance/BOL freight</FieldLabel>
                        <NumericEdit TValue="decimal" @bind-Value="invoice.Insurance" />
                    </Field>
                </Fields>
            </Div>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Items">
            This is where items are entered.
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>
<button class="btn btn-primary" @onclick="(() => UpdateInvoice())">Save</button>
<button class="btn btn-secondary" @onclick="(() => Cancel())">Cancel</button>
<button class="btn btn-danger" @onclick="(() => DeleteInvoice())">Delete</button>

@code {
    [Parameter]
    public string? InvoiceId { get; set; }

    bool newInv;
    public IEnumerable<Vendor> vendors;
    public string selectedVendor { get; set; }
    public IEnumerable<Tarriff> tarrifList;
    public string selectedTarriff { get; set; }
    private Blazorise.TextEdit firstEle;

    DateTime invDate = new DateTime();
    private List<Invoice> Invoices;

    public Invoice invoice { get; set; } = new Invoice();

    protected override async Task OnInitializedAsync()
    {
        vendors = await dbContext.Vendor.ToListAsync();
        tarrifList = await dbContext.Tarriff.ToListAsync();
        if (InvoiceId == "new")
        {
            newInv = true;
            invDate = DateTime.Now;
            invoice.Id = Guid.NewGuid();
        }
        else
        {
            await LoadInvoiceAsync();
            selectedVendor = invoice.Vendor?.Name;
            invDate = invoice.Date;
        }

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            firstEle.Focus();
        }
    }

    private async Task LoadInvoiceAsync()
    {
        Invoices = await dbContext.Invoice.Include(i => i.Vendor).ToListAsync();
        invoice = Invoices.FirstOrDefault(i => i.Id.ToString() == InvoiceId);
    }

    private async Task UpdateInvoice()
    {
        invoice.Vendor = vendors.FirstOrDefault(v => v.Name == selectedVendor);
        invoice.Date = invDate;
        if (newInv == true)
        {
            invoice.Shipping = 0;
            invoice.Insurance = 0;
            await invoiceService.AddInvoiceAsync(invoice);
        }
        else
        {
            await invoiceService.UpdateInvoiceAsync(invoice);
        }
        
        NavigationManager.NavigateTo("/invoices");
    }

    private async Task DeleteInvoice()
    {
        await invoiceService.DeleteInvoiceAsync(invoice);
        NavigationManager.NavigateTo("/invoices");
    } 

    private async Task Cancel()
    {
        NavigationManager.NavigateTo("/invoices");
    }

    void OnDateChange(DateTime date)
    {
        invDate = date;
    }
}
