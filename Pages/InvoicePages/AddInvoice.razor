@page "/invoices/add"

@using Zip2Clear.Data

@inject InvoiceServices invoiceService
@inject VendorServices vendorService

<h3>New Invoice</h3>
<br/>
<div class="input-group">
    <div class="input-group-prepend">
        <span class="input-group-text">Invoice Number:</span>
    </div>
    <input class="form-control" @ref="firstEle" @bind="NewInvoice.InvoiceNumber" />  
</div>
<br />
<div class="input-group">
    <div class="input-group-prepend">
        <span class="input-group-text">Vendor:</span>
    </div>
    <Autocomplete TItem="Vendor" TValue="string" Data="@vendors" ValueField="@(( vendor ) => vendor.Name)" TextField="@(( vendor ) => vendor.Name)"
        @bind-SelectedValue=@selectedVendor @bind-SelectedText=@selectedVendorText FreeTyping >
        <NotFoundContent>Sorry... @context was not found! :( </NotFoundContent>
    </Autocomplete>
</div>
<br />
<div class="input-group">
    <div class="input-group-prepend">
        <span class="input-group-text">Invoice Date:</span>
    </div>
    <DatePicker TValue="DateTime" Date="invDate" DateChanged="@(args => OnDateChange(args))" />  
</div>
<br />
<br />
<a tabindex="0" class="btn btn-info" @onclick="AddNewInvoice" href="/invoices"> Save Invoice</a>
<a tabindex="0" href="/invoices" class="btn btn-secondary">Cancel</a>




        
@code {
    DateTime invDate = DateTime.Now;
    private ElementReference firstEle;

    public IEnumerable<Vendor> vendors;
    public string selectedVendor { get; set; }
    public string selectedVendorText { get; set; }

    protected override async Task OnInitializedAsync()
    {
        vendors = await vendorService.GetVendorAsync();
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await firstEle.FocusAsync();
        }
    }

    public Invoice NewInvoice { get; set; } = new Invoice();
    private async Task AddNewInvoice()
    {

        NewInvoice.Id = Guid.NewGuid();
        NewInvoice.Vendor = vendors.FirstOrDefault(v => v.Name == selectedVendor);
        NewInvoice.VendorName = selectedVendor;
        NewInvoice.Date = invDate;
        await invoiceService.AddInvoiceAsync(NewInvoice);
    }

    void OnDateChange(DateTime date)
    {
        invDate = date;
    }
}