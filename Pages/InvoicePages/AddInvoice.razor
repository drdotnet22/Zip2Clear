@page "/invoice/new"

@using Zip2Clear.Data
@using Microsoft.EntityFrameworkCore
@using Radzen
@using Syncfusion.Blazor.Cards

@inject InvoiceServices invoiceService
@inject VendorServices vendorService
@inject MyDbContext dbContext
@inject NotificationService NotificationService

<h3>New Invoice</h3>

<SfCard Style="width:500px">
    <div class="row">
        <SfTextBox @bind-Value="NewInvoice.Number" Placeholder="Invoice number" FloatLabelType="FloatLabelType.Auto" />
    </div>
    <br />
    <div class="row">
        <SfAutoComplete TValue="Vendor" TItem="Vendor" DataSource="vendors" @bind-Value="NewInvoice.Vendor" Autofill="true" Placeholder="Vendor" FloatLabelType="FloatLabelType.Auto">
            <AutoCompleteFieldSettings Value="Name"/>
        </SfAutoComplete>
        <SfButton IsPrimary="true" IconCss="e-btn-sb-icons e-add-icon" CssClass="e-small e-round e-flat" OnClick="OpenNewVendorDialog" tabindex="-1"/>
    </div>
    <br />
    <div class="row">
        <SfDatePicker @bind-Value="invDate" />
    </div>
    <br />
    <div class="input-group">
        <SfAutoComplete TValue="Department" TItem="Department" DataSource="departmentList" @bind-Value="NewInvoice.Department" Autofill="true">
            <AutoCompleteFieldSettings Value="Code"/>
        </SfAutoComplete>
    </div>
    <br />
    <div class="row">
        <SfNumericTextBox TValue="decimal" @bind-Value="NewInvoice.Shipping" Placeholder="Shipping" FloatLabelType="FloatLabelType.Auto" />
    </div>
</SfCard>

<button tabindex="0" class="btn btn-info" @onclick="AddNewInvoice"> Save Invoice</button>
<a tabindex="0" href="/invoices" class="btn btn-secondary">Cancel</a>

<SfDialog @bind-Visible="newVendorDialogVisible" ShowCloseIcon="true" Width="250" AllowPrerender="false">
    <DialogTemplates>
        <Header>Add new vendor</Header>
        <Content>
            <Zip2Clear.Pages.Vendors.AddVendor />
        </Content>
    </DialogTemplates>
</SfDialog>

        
@code {
    DateTime invDate = DateTime.Now;
    private ElementReference firstEle;

    public Invoice NewInvoice { get; set; } = new Invoice();

    public IEnumerable<Vendor> vendors;
    public IEnumerable<Department> departmentList;



    protected override async Task OnInitializedAsync()
    {
        vendors = await dbContext.Vendor.ToListAsync();
        departmentList = await dbContext.Department.ToListAsync();
        NewInvoice.InvoiceId = Guid.NewGuid();
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await firstEle.FocusAsync();
        }
    }

    private async Task AddNewInvoice()
    {
        try
        {
            await invoiceService.AddInvoiceAsync(NewInvoice);
        }
        catch(Exception ex)
        {
            NotificationMessage message = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error:", Detail = ex.ToString(), Duration = 40000 };
            ShowNotification(message);
        }
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    #region
    private bool newVendorDialogVisible = false;
    public async Task OpenNewVendorDialog()
    {
        this.newVendorDialogVisible = true;
    }
    #endregion
}