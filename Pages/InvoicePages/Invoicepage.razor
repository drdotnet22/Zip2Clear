@page "/invoices"

@using Zip2Clear.Data
@using Microsoft.EntityFrameworkCore

@inject NavigationManager NavigationManager
@inject InvoiceServices invoiceService
@inject MyDbContext context

<h2>Invoices</h2>
<Button Color="Color.Primary" Clicked="@NewInvoice" >New Invoice</Button>

<table class="table">
		<thead>
			<tr>
				<th>Invoice Number</th>
				<th>Invoice Date</th>
				<th>Vendor</th>
				<th>Total</th>
                <th></th>
			</tr>
		</thead>
		<tbody>
                @if (Invoices.Any())
                {
                    @foreach (var invoice in Invoices)
                    {
                        <tr>
                            <td @onclick="(() => ViewInvoice(invoice))">@invoice.Number</td>
                            <td @onclick="(() => ViewInvoice(invoice))">@invoice.Date</td>
                            <td @onclick="(() => ViewInvoice(invoice))">@invoice.Vendor?.Name</td>
                            <td width="180px">
                                <button class="btn btn-danger btn-sm" @onclick="(() => DeleteInvoice(invoice))">Delete</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr><td colspan="6"><strong>No invoices available</strong></td></tr>
                }
        </tbody>
</table>

@code {
    [CascadingParameter]
    protected Declaration declaration { get; set; }

    public IList<Invoice> Invoices { get; set; }
    private Invoice selectedInvoice;

    protected override async Task OnInitializedAsync()
    {
        await RefreshInvoices();
        await base.OnInitializedAsync();
    }

    private async Task RefreshInvoices()
    {
        if (declaration != null)
        {
            Invoices = await invoiceService.GetInvoicesByDeclarationAsync(declaration);
        }
        else
        {
            Invoices = await invoiceService.GetInvoiceAsync();
        }
    }

    private async Task NewInvoice()
    {
        NavigationManager.NavigateTo($"/invoices/new");
    }

    private async Task DeleteInvoice(Invoice invoice)
    {
        context.Invoice.Remove(invoice);
        await context.SaveChangesAsync();
        await RefreshInvoices();
    } 
    
    private void ViewInvoice(Invoice invoice)
    {
        string invoiceId = invoice.InvoiceId.ToString();
        NavigationManager.NavigateTo($"/invoices/{invoiceId}");
    }
}