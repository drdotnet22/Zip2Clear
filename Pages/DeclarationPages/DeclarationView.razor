@page "/declarations/{declarationId}"

@inherits LayoutComponentBase

@using Zip2Clear.Data
@using Microsoft.EntityFrameworkCore
@using Radzen

@inject DeclarationServices declarationService
@inject InvoiceServices invoiceService
@inject ItemServices itemService
@inject MyDbContext dbContext
@inject DialogService DialogService

@implements IDisposable

<h3>DeclarationView</h3>

<RadzenTabs>
    <Tabs>
        <RadzenTabsItem Text="Header">
            
        </RadzenTabsItem>
        <RadzenTabsItem Text="B/L">
            <p>@declaration.ManifestNumber</p>
            <p>@declaration.BOLnumber</p>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Invoices">
            <RadzenButton Text="Open Invoice List" ButtonStyle="ButtonStyle.Secondary" Click=@OpenInvoiceList />
            <br/>
            <br/>
            <RadzenDataGrid AllowFiltering=true AllowColumnResize=true FilterMode="FilterMode.Advanced" 
                    AllowSorting=true PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary=true
                    TItem="Invoice" Data="@invoices" @ref="invoiceGrid"
                    EditMode="Radzen.DataGridEditMode.Single">
                <Columns>
                    <RadzenDataGridColumn TItem="Invoice" Property="Number" Title="Invoice Number" Filterable=true Sortable=true />
                    <RadzenDataGridColumn TItem="Invoice" Property="Date" Title="Date" Filterable=true Sortable=true />
                    <RadzenDataGridColumn TItem="Invoice" Property="Vendor.Name" Title="Vendor" Filterable=true Sortable=true />
                    <RadzenDataGridColumn TItem="Invoice" Property="Shipping" Title="Shipping" Filterable=true Sortable=true />
                    <RadzenDataGridColumn TItem="Invoice" Property="Insurance" Title="B/L freight" Filterable=true Sortable=true />
                    <RadzenDataGridColumn TItem="Invoice" Context="invoice" Filterable=false Sortable=false Width="70px">
                        <Template Context="invoice">
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Click="@(args => DeleteInvoiceRow(invoice))" />
                            <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="close" Size="ButtonSize.Small" Click="@(args => UnassignInvoice(invoice))" />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
            <CascadingValue Value="invoices" >
                <div class="content px-4">
                    <InvoiceList />
                </div>
            </CascadingValue>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Items" >
            <CascadingValue Value="declaration" >
                <ItemList />
            </CascadingValue>
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>

@code {
    [Parameter]
    public string? declarationId { get; set; }

    //Declaration
    private List<Declaration> declarationList;
    public Declaration declaration;

    //Invoice
    private List<Invoice> Invoices;
    public List<Invoice> invoices;
    RadzenDataGrid<Invoice> invoiceGrid;

    protected override async Task OnInitializedAsync()
    {
        declarationList = await declarationService.GetDeclarationAsync();
        await base.OnInitializedAsync();
        await LoadDeclarationAsync();
        await RefreshInvoices();
        await RefreshItems();
    }

    private async Task LoadDeclarationAsync()
    {
        declaration = declarationList.FirstOrDefault(d => d.Id.ToString() == declarationId);
        await base.OnParametersSetAsync();
    }

    private async Task RefreshInvoices()
    {
        invoices = dbContext.Invoice.Where(i => i.Declaration == declaration).Include("Vendor").ToList();
    }

    #region Dialog
    public void Dispose()
    {
    }

    public async Task OpenInvoiceList()
    {
        await DialogService.OpenAsync<Shared.UnassignedInvoices>("Unassigned Invoices",
               new Dictionary<string, object>() { { "declarationId", declaration.DeclarationNumber } },
               new DialogOptions() { Width = "700px", Height = "570px", Resizable = true, Draggable = true });

        RefreshInvoices();
    }
    #endregion

    #region Item Grid
    RadzenDataGrid<Item> itemsGrid;
    IList<Item> items;

    private async Task RefreshItems()
    {
        items = dbContext.Item.Where(i => i.Invoice.Declaration.DeclarationNumber == declaration.DeclarationNumber).ToList();
    }

    async Task EditItemRow(Item item)
    {
        await itemsGrid.EditRow(item);
    }

    void OnUpdateItemRow(Item item)
    {
        if (item == itemToInsert)
        {
            itemToInsert = null;
        }

        dbContext.Update(item);

        dbContext.SaveChanges();
    }

    async Task SaveItemRow(Item order)
    {
        if (order == itemToInsert)
        {
            itemToInsert = null;
        }

        await itemsGrid.UpdateRow(order);
    }

    void CancelItemEdit(Item order)
    {
        if (order == itemToInsert)
        {
            itemToInsert = null;
        }

        itemsGrid.CancelEditRow(order);

        // For production
        var orderEntry = dbContext.Entry(order);
        if (orderEntry.State == EntityState.Modified)
        {
            orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
            orderEntry.State = EntityState.Unchanged;
        }
    }

    async Task DeleteItemRow(Item item)
    {
        if (item == itemToInsert)
        {
            itemToInsert = null;
        }

        if (items.Contains(item))
        {
            dbContext.Remove<Item>(item);

            dbContext.SaveChanges();

            await itemsGrid.Reload();
        }
        else
        {
            itemsGrid.CancelEditRow(item);
        }
    }

    Item itemToInsert;

    async Task InsertItemRow()
    {
        itemToInsert = new Item();
        await itemsGrid.InsertRow(itemToInsert);
    }

    void OnCreateItemRow(Item item)
    {
        dbContext.Add(item);

        dbContext.SaveChanges();
    }
    #endregion

    #region Invoice Grid
    async Task DeleteInvoiceRow(Invoice invoice)
    {
        dbContext.Remove<Invoice>(invoice);
        dbContext.SaveChanges();
        await RefreshInvoices();
        await invoiceGrid.Reload(); 
    }

    async Task UnassignInvoice(Invoice invoice)
    {
        invoice.Declaration = null;
        dbContext.SaveChanges();
        await RefreshInvoices();
        await invoiceGrid.Reload();
    }
    #endregion
}
