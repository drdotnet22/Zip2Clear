@page "/declarations/{declarationId}"

@inherits LayoutComponentBase

@using Zip2Clear.Data
@using Microsoft.EntityFrameworkCore
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Popups

@inject DeclarationServices declarationService
@inject InvoiceServices invoiceService
@inject ItemServices itemService
@inject MyDbContext dbContext

<h3>DeclarationView</h3>

<SfTab>
    <TabItems>
        <TabItem>
            <ChildContent>
                <TabHeader Text="Header"></TabHeader>
            </ChildContent>
            <ContentTemplate>
                <p>@declaration.DeclarationNumber</p>
            </ContentTemplate>
        </TabItem>
        <TabItem>
            <ChildContent>
                <TabHeader Text="B/L"></TabHeader>
            </ChildContent>
            <ContentTemplate>
                <p>@declaration.ManifestNumber</p>
                <p>@declaration.BOLnumber</p>
            </ContentTemplate>
        </TabItem>
        <TabItem>
            <ChildContent>
                <TabHeader Text="Invoices"></TabHeader>
            </ChildContent>
            <ContentTemplate>
                <SfButton OnClick="@OpenUnassignedInvoiceList" IsPrimary="true">Open Invoice List</SfButton>
                <br/>
                <br/>
                <SfGrid DataSource="@invoices" AllowPaging="true">
                    <GridColumns>
                        <GridColumn Field="@nameof(Invoice.Number)" HeaderText="Invoice Number" ></GridColumn>
                        <GridForeignColumn Field="@nameof(Invoice.VendorId)" ForeignKeyValue="Name" ForeignDataSource="@vendors"></GridForeignColumn>
                        <GridColumn Field="@nameof(Invoice.Date)" HeaderText="Date"></GridColumn>
                        <GridColumn Field="@nameof(Invoice.Shipping)" HeaderText="Shipping"></GridColumn>
                        <GridColumn Field="@nameof(Invoice.Insurance)" HeaderText="B/L freight"></GridColumn>
                    </GridColumns>
                </SfGrid>
            </ContentTemplate>
        </TabItem>
        <TabItem>
            <ChildContent>
                <TabHeader Text="Items"></TabHeader>
            </ChildContent>
            <ContentTemplate>
                <CascadingValue Value="declaration" >
                    <ItemList />
                </CascadingValue>
            </ContentTemplate>
        </TabItem>
    </TabItems>
</SfTab>

<SfDialog ShowCloseIcon="true" @bind-Visible="dialogVisible" AllowPrerender="false" Width="700px">
    <DialogTemplates>
        <Header>Unnasigned Invoices</Header>
        <Content>
            <CascadingValue Value="declaration">
                <UnassignedInvoices OnClick="CloseUnassignedInvoiceDialog" />
            </CascadingValue>
        </Content>
    </DialogTemplates>
</SfDialog>

@code {
    [Parameter]
    public string? declarationId { get; set; }


    //Declaration
    private List<Declaration> declarationList;
    public Declaration declaration;

    //Invoice
    private List<Invoice> Invoices;
    public List<Invoice> invoices;
    RadzenDataGrid<Invoice> invoiceGrid;

    //Vendor
    private IEnumerable<Vendor> vendors;

    protected override async Task OnInitializedAsync()
    {
        declarationList = await declarationService.GetDeclarationAsync();
        vendors = await dbContext.Vendor.ToListAsync();
        await LoadDeclarationAsync();
        await RefreshInvoices();
        await base.OnInitializedAsync();
    }

    private async Task LoadDeclarationAsync()
    {
        declaration = declarationList.FirstOrDefault(d => d.DeclarationId.ToString() == declarationId);
        await base.OnParametersSetAsync();
    }

    private async Task RefreshInvoices()
    {
        invoices = dbContext.Invoice.Where(i => i.Declaration == declaration).Include("Vendor").ToList();
    }

    #region Dialog
    private bool dialogVisible = false;
    public void OpenUnassignedInvoiceList()
    {
        this.dialogVisible = true;
    }

    public void CloseUnassignedInvoiceDialog(string action)
    {
        if (action == "CloseDialog")
        {
            this.dialogVisible = false;
            RefreshInvoices();
        }
    }
    #endregion
    #region Invoice Grid
    async Task DeleteInvoiceRow(Invoice invoice)
    {
        dbContext.Remove<Invoice>(invoice);
        dbContext.SaveChanges();
        await RefreshInvoices();
        await invoiceGrid.Reload(); 
    }

    async Task UnassignInvoice(Invoice invoice)
    {
        invoice.Declaration = null;
        dbContext.SaveChanges();
        await RefreshInvoices();
        await invoiceGrid.Reload();
    }
    #endregion
}
