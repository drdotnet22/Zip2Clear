@page "/declarations"

@using Zip2Clear.Data
@using Microsoft.EntityFrameworkCore
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Popups

@inject NavigationManager NavigationManager
@inject MyDbContext dbContext
@inject SfDialogService DialogService

<h3>Declarations</h3>

<SfGrid DataSource="declarationList">
    <GridEvents OnRecordDoubleClick="DoubleClickHandler" CommandClicked="ActionBeginHandler" TValue="Declaration"></GridEvents>
    <GridColumns>
        <GridColumn Field="@nameof(Declaration.SubmittedDate)" HeaderText="Submitted Date"></GridColumn>
        <GridColumn Field="@nameof(Declaration.DeclarationNumber)" HeaderText="Declaration Number"></GridColumn>
        <GridColumn Field="@nameof(Declaration.BOLnumber)" HeaderText="Bill of Lading Number"></GridColumn>
        <GridColumn Field="@nameof(Declaration.Type)" HeaderText="Declaration Type"></GridColumn>
        <GridColumn Field="@nameof(Declaration.Status)" HeaderText="Status"></GridColumn>
        <GridColumn >
            <GridCommandColumns>
                <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-delete", CssClass="e-flat" })"></GridCommandColumn>
            </GridCommandColumns>
        </GridColumn>
    </GridColumns>
</SfGrid>

@code {
    private List<Declaration> declarationList;
    private List<Invoice> invoiceList;
    private Declaration selectedDeclaration;

    protected override async Task OnInitializedAsync()
    {
        await RefreshDeclarations();
        await base.OnInitializedAsync();
    }

    private async Task RefreshDeclarations()
    {
        declarationList = await dbContext.Declaration.ToListAsync();
    }


    public void DoubleClickHandler(RecordDoubleClickEventArgs<Declaration> args)
    {
        string declarationId = args.RowData.DeclarationId.ToString();
        NavigationManager.NavigateTo($"/declarations/{declarationId}");
    }

    public async void ActionBeginHandler(CommandClickEventArgs<Declaration> args)
    {
        if (args.CommandColumn.Type == CommandButtonType.Delete)
        {
            bool isConfirm = await DialogService.ConfirmAsync("Are you sure you want to permanently delete this declaration?", "Delete Declaration");
            if (isConfirm == true)
            {
                invoiceList = dbContext.Invoice
                                    .Where(i => i.Declaration == args.RowData)
                                    .ToList();
                foreach (var inv in invoiceList)
                {
                    inv.DeclarationId = null;
                    dbContext.Update(inv);
                    dbContext.SaveChanges();
                }
                dbContext.Declaration.Remove(args.RowData);
                dbContext.SaveChanges();
                RefreshDeclarations();
            }
        }
    }
}
