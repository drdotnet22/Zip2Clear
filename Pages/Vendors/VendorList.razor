@page "/vendors"

@using Zip2Clear.Data
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@using Microsoft.EntityFrameworkCore

@inject MyDbContext dbContext
@inject VendorServices vendorService


<SfButton OnClick="exportPDF">Export PDF</SfButton>
<br/><br/>
<SfGrid DataSource="@vendors" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel", "Search" })" AllowPaging="true" AllowPdfExport="true" @ref="vendorGrid" RowHeight="40"
    AllowSorting="true" >
    <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" ShowConfirmDialog="false"></GridEditSettings>
    <GridEvents OnActionBegin="ActionBeginHandler" CellSaved="CellSaveHandler" TValue="Vendor"></GridEvents>
    <GridColumns>
        <GridColumn Field="@nameof(Vendor.Name)" HeaderText="Name" ValidationRules="@(new ValidationRules{ Required=true })"></GridColumn>
        <GridColumn Field="@nameof(Vendor.AddressLine)" HeaderText="Address Line" ValidationRules="@(new ValidationRules{ Required=true })"></GridColumn>
        <GridColumn Field="@nameof(Vendor.CityName)" HeaderText="City" ></GridColumn>
        <GridColumn Field="@nameof(Vendor.State)" HeaderText="State" ValidationRules="@(new ValidationRules{ MaxLength=3 })"></GridColumn>
        <GridColumn Field="@nameof(Vendor.PostalCode)" HeaderText="Postal Code"></GridColumn>
        <GridColumn Field="@nameof(Vendor.CountryCode)" HeaderText="Country" DefaultValue="@("US")"></GridColumn>
    </GridColumns>
</SfGrid>

@code {
    SfGrid<Vendor> vendorGrid;
    public List<Vendor> vendors { get; set; }

    private List<string> toolbar;

    protected override async Task OnInitializedAsync()
    {
        await GetVendors();
        await base.OnInitializedAsync();
    }

    private async Task GetVendors()
    {
        vendors = await vendorService.GetVendorAsync();
    }

    private void ActionBeginHandler(ActionEventArgs<Vendor> Args)
    {
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (Args.Action == "Add")
            {
                Args.Data.VendorId = Guid.NewGuid();
                vendorService.AddVendorAsync(Args.Data);
            }
            else if (Args.Action == "Edit")
            {
                try
                {
                    vendorService.UpdateVendorAsync(Args.Data);
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }

            }
        }
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            vendorService.DeleteVendorAsync(Args.Data);
            GetVendors();
        }
    }

    private void CellSaveHandler(CellSaveArgs<Vendor> args)
    {
        vendorGrid.EndEditAsync();
    }

    private void exportPDF()
    {
        PdfExportProperties exportProperties = new PdfExportProperties();
        exportProperties.FileName = "Vendor_List.pdf";
        vendorGrid.ExportToPdfAsync(exportProperties);
    }
}
