@page "/vendors"

@using Zip2Clear.Data
@using Syncfusion.Blazor.Grids
@using Microsoft.EntityFrameworkCore

@inject MyDbContext dbContext

<SfGrid DataSource="@vendors" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })" AllowPaging="true" @ref="vendorGrid" RowHeight="40"
    AllowFiltering="true" AllowSorting="true" >
    <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" ShowConfirmDialog="false"></GridEditSettings>
    <GridEvents OnActionBegin="ActionBeginHandler" CellSaved="CellSaveHandler" TValue="Vendor"></GridEvents>
    <GridColumns>
        <GridColumn Field="@nameof(Vendor.Name)" HeaderText="Name" ValidationRules="@(new ValidationRules{ Required=true })"></GridColumn>
        <GridColumn Field="@nameof(Vendor.AddressLine)" HeaderText="Address Line" ValidationRules="@(new ValidationRules{ Required=true })"></GridColumn>
        <GridColumn Field="@nameof(Vendor.CityName)" HeaderText="City" ></GridColumn>
        <GridColumn Field="@nameof(Vendor.State)" HeaderText="State"></GridColumn>
        <GridColumn Field="@nameof(Vendor.PostalCode)" HeaderText="Postal Code"></GridColumn>
        <GridColumn Field="@nameof(Vendor.CountryCode)" HeaderText="Country" DefaultValue="@("US")"></GridColumn>
    </GridColumns>
</SfGrid>

@code {
    SfGrid<Vendor> vendorGrid;
    public List<Vendor> vendors { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetVendors();
        await base.OnInitializedAsync();
    }

    private async Task GetVendors()
    {
        vendors = dbContext.Vendor.ToList();
    }

    private void ActionBeginHandler(ActionEventArgs<Vendor> Args)
    {
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (Args.Action == "Add")
            {
                Args.Data.VendorId = Guid.NewGuid();
                dbContext.Vendor.Add(Args.Data);
                dbContext.SaveChanges();
                GetVendors();
            }
            else if (Args.Action == "Edit")
            {
                try
                {
                    var vendorExists = dbContext.Vendor.Find(Args.Data.VendorId);
                    if (vendorExists != null)
                    {
                        dbContext.Entry(vendorExists).State = EntityState.Detached;
                        dbContext.Vendor.Update(Args.Data);
                        dbContext.SaveChanges();
                        GetVendors();
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
                
            }
        }
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            dbContext.Vendor.Remove(Args.Data);
            dbContext.SaveChanges();
            GetVendors();
        }
    }

    private void CellSaveHandler(CellSaveArgs<Vendor> args)
    {
        vendorGrid.EndEditAsync();
    }

}
